name: Testing & Linting

on:
  pull_request:
    branches:
      - main

jobs:
  isort:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ globdoc, identity ]

    name: ISort - ${{ matrix.service }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Run ISort
        run: |
          SERVICES=$(find backend/services -mindepth 1 -maxdepth 1 -type d -printf '%f\n')
          for service in $SERVICES; do
            echo echo "Creating empty .env for backend/services/$service"
            touch backend/services/$service/.env || true
          done
          docker compose run --rm test ${{ matrix.service }} --run isort --check-only --diff

  black:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ globdoc, identity ]

    name: Black - ${{ matrix.service }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Run Black
        run: |
          SERVICES=$(find backend/services -mindepth 1 -maxdepth 1 -type d -printf '%f\n')
          for service in $SERVICES; do
            echo echo "Creating empty .env for backend/services/$service"
            touch backend/services/$service/.env || true
          done
          docker compose run --rm test ${{ matrix.service }} --run black --check

  bandit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ globdoc, identity ]

    name: Bandit - ${{ matrix.service }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Run Bandit
        run: |
          SERVICES=$(find backend/services -mindepth 1 -maxdepth 1 -type d -printf '%f\n')
          for service in $SERVICES; do
            echo echo "Creating empty .env for backend/services/$service"
            touch backend/services/$service/.env || true
          done
          docker compose run --rm test ${{ matrix.service }} --run bandit

  flake8:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ globdoc, identity ]

    name: Flake8 - ${{ matrix.service }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Run Flake8
        run: |
          SERVICES=$(find backend/services -mindepth 1 -maxdepth 1 -type d -printf '%f\n')
          for service in $SERVICES; do
            echo echo "Creating empty .env for backend/services/$service"
            touch backend/services/$service/.env || true
          done
          docker compose run --rm test ${{ matrix.service }} --run flake8

  mypy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ globdoc, identity ]

    name: MyPy - ${{ matrix.service }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Run MyPy
        run: |
          SERVICES=$(find backend/services -mindepth 1 -maxdepth 1 -type d -printf '%f\n')
          for service in $SERVICES; do
            echo echo "Creating empty .env for backend/services/$service"
            touch backend/services/$service/.env || true
          done
          docker compose run --rm test ${{ matrix.service }} --run mypy

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ globdoc, identity ]

    name: Pytest - ${{ matrix.service }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Run Pytest
        run: |
          SERVICES=$(find backend/services -mindepth 1 -maxdepth 1 -type d -printf '%f\n')
          for service in $SERVICES; do
            echo echo "Creating empty .env for backend/services/$service"
            touch backend/services/$service/.env || true
          done
          docker compose run --rm test ${{ matrix.service }} --run pytest
