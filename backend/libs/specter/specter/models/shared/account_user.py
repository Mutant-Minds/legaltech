from typing import TYPE_CHECKING

from specter.db.base_class import Base
from sqlalchemy import TIMESTAMP, Boolean, Column, Index, String, func
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship

if TYPE_CHECKING:
    from .tenant import Tenant  # noqa: F401


class AccountUser(Base):  # type: ignore
    """
    SQLAlchemy model representing a user account in the system.

    Attributes:
        id (UUID): Primary key, generated by the database.
        created_on (datetime): Timestamp when the user was created.
        name (str): User's full name.
        email (str): Unique email address of the user.
        password_hash (str): Secure hash of the user's password.
        country_code (str): Country code (e.g., 'US', 'IN') for the user.
        phone (str): User's phone number.
        is_active (bool): Indicates if the user account is active.
        last_logged_in (datetime): Timestamp of the user's last login.
        updated_on (datetime): Timestamp when the user was last updated.
        tenants (List[Tenant]): List of tenants owned by this user.
    """

    __tablename__ = "account_user"

    id = Column(
        UUID(as_uuid=True),
        primary_key=True,
        index=True,
        server_default=func.gen_random_uuid(),
        doc="Primary key, generated as a random UUID by the database.",
    )
    created_on = Column(
        TIMESTAMP(timezone=True),
        nullable=False,
        server_default=func.current_timestamp(),
        doc="Timestamp when the user account was created.",
    )
    name = Column(String(200), nullable=False, doc="User's name.")
    email = Column(
        String(255),
        unique=True,
        nullable=False,
        index=True,
        doc="Unique email address of the user.",
    )
    username = Column(
        String(100),
        unique=True,
        nullable=False,
        index=True,
        doc="Unique username of the user.",
    )
    password_hash = Column(
        String(255), nullable=False, doc="Hashed password for secure storage."
    )
    country_code = Column(
        String(10), doc="Country code for the user (e.g., 'US', 'IN')."
    )
    phone = Column(String(20), doc="User's phone number.")
    is_active = Column(
        Boolean,
        nullable=False,
        default=True,
        server_default="true",
        index=True,
        doc="Indicates if the user is active.",
    )
    last_logged_in = Column(
        TIMESTAMP(timezone=True),
        nullable=False,
        server_default="1970-01-01 00:00:00+00",
        doc="Timestamp of the user's last login.",
    )
    updated_on = Column(
        TIMESTAMP(timezone=True),
        nullable=False,
        server_default=func.current_timestamp(),
        server_onupdate=func.current_timestamp(),
        doc="Timestamp when the user was last updated.",
    )

    # Relationships
    tenants = relationship(
        "Tenant",
        back_populates="owner",
        cascade="all, delete-orphan",
        doc="Tenants owned by this user.",
    )

    __table_args__ = (Index("ix_accountuser_is_active", "is_active"),)
