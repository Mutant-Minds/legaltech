from typing import TYPE_CHECKING

from specter.db.base_class import Base
from sqlalchemy import TIMESTAMP, Boolean, Column, ForeignKey, Index, String, func
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship

if TYPE_CHECKING:
    from .account_user import AccountUser  # noqa: F401


class Tenant(Base):  # type: ignore
    """
    SQLAlchemy model representing a tenant (organization, company, or customer) in the system.

    Attributes:
        id (UUID): Primary key, generated by the database.
        created_on (datetime): Timestamp when the tenant was created.
        name (str): Name of the tenant.
        host (str): Hostname/domain associated with the tenant.
        schema (str): Database schema associated with the tenant.
        owner_id (UUID): Foreign key referencing the owning AccountUser.
        is_active (bool): Indicates if the tenant is active.
        updated_on (datetime): Timestamp when the tenant was last updated.
        owner (AccountUser): The user who owns this tenant (relationship).
    """

    __tablename__ = "tenant"

    id = Column(
        UUID(as_uuid=True),
        primary_key=True,
        index=True,
        server_default=func.gen_random_uuid(),
        doc="Primary key, generated as a random UUID by the database.",
    )
    created_on = Column(
        TIMESTAMP(timezone=True),
        nullable=False,
        server_default=func.current_timestamp(),
        doc="Timestamp when the tenant was created.",
    )
    name = Column(String(255), nullable=False, doc="Name of the tenant.")
    host = Column(
        String(255),
        unique=True,
        nullable=False,
        doc="Hostname/domain for the tenant.",
    )
    schema = Column(
        String(64),
        unique=True,
        nullable=False,
        doc="Database schema for the tenant.",
    )
    owner_id = Column(
        UUID(as_uuid=True),
        ForeignKey("account_user.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
        doc="Foreign key referencing the owning AccountUser.",
    )
    is_active = Column(
        Boolean,
        nullable=False,
        default=True,
        server_default="true",
        doc="Indicates if the tenant is active.",
    )
    updated_on = Column(
        TIMESTAMP(timezone=True),
        nullable=False,
        server_default=func.current_timestamp(),
        server_onupdate=func.current_timestamp(),
        doc="Timestamp when the tenant was last updated.",
    )

    # Relationships
    owner = relationship(
        "AccountUser", back_populates="tenants", doc="The user who owns this tenant."
    )

    __table_args__ = (Index("ix_tenant_owner_is_active", "owner_id", "is_active"),)
